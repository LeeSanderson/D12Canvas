@namespace D12Canvas

@page "/diagram"

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using D12Canvas

<div class="diagram-container" @ref="ContainerElement">
    <div class="diagram-canvas" 
         @onmousedown="@HandleMouseDown"
         @onmousemove="@HandleMouseMove"
         @onmouseup="@HandleMouseUp"
         @onwheel="@HandleMouseWheel">
        <div class="canvas-content" style="@ContentStyle">
            @ChildContent
        </div>
    </div>
</div>

@inject IJSRuntime JS

<style>
    .diagram-container {
        width: 100%;
        height: 100%;
        display: grid;
        grid-template-rows: minmax(400px, auto) minmax(400px, 100%);
        position: relative;
        overflow: hidden;
        border: 1px solid #ccc;
    }
    
    .diagram-canvas {
        width: 100%;
        height: 100%;
        grid-row: 1;
        position: relative;
        cursor: grab;
    }
    
    .diagram-canvas:active {
        cursor: grabbing;
    }
    
    .canvas-content {
        position: absolute;
        top: 0;
        left: 0;
        transform-origin: top left;
        transition: transform 0.1s ease-out;
        background: #f0f0f0;
        background-image: 
            linear-gradient(to right, rgba(0,0,0,0.1) 1px, transparent 1px),
            linear-gradient(to bottom, rgba(0,0,0,0.1) 1px, transparent 1px);
        background-size: 20px 20px;
        background-position: 0 0;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private ZoomPanTracker _zoomPanTracker = new ZoomPanTracker();
    private bool _isPanning = false;
    private MouseEventArgs? _panStart;
    private ElementReference ContainerElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dimensions = await JS.InvokeAsync<Dictionary<string, double>>(
                "DiagramCanvas.getContainerDimensions", ContainerElement);
            
            _zoomPanTracker.SetContainerSize((int)dimensions["width"], (int)dimensions["height"]);
            _zoomPanTracker.SetCanvasSize(3000, 3000);
            StateHasChanged();
        }
    }

    private string ContentStyle => $"width: {_zoomPanTracker.CanvasWidth}px; height: {_zoomPanTracker.CanvasHeight}px; transform: translate({_zoomPanTracker.PanX}px, {_zoomPanTracker.PanY}px) scale({_zoomPanTracker.Scale});";

    private void HandleMouseDown(MouseEventArgs e)
    {
        if (e.Button == 0) // Left mouse button
        {
            _isPanning = true;
            _panStart = e;
        }
    }

    private void HandleMouseMove(MouseEventArgs e)
    {
        if (_isPanning && _panStart != null)
        {
            var deltaX = e.ClientX - _panStart.ClientX;
            var deltaY = e.ClientY - _panStart.ClientY;
            
            _zoomPanTracker.Pan(deltaX, deltaY);
            
            _panStart = e;
            StateHasChanged();
        }
    }

    private void HandleMouseUp(MouseEventArgs e)
    {
        _isPanning = false;
        _panStart = null;
    }

    private void HandleMouseWheel(WheelEventArgs e)
    {
        var zoomIn = e.DeltaY < 0;  
        var zoomed = _zoomPanTracker.Zoom(zoomIn);
        if (zoomed)
        {
            StateHasChanged();
        }
    }
}
